<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性：用于指定当前的映射文件和哪个接口进行映射，需指定接口文件的路径，需要指定包的完整路径接口-->
<mapper namespace="com.cy.store.mapper.UserMapper">
    <!--id属性：表示映射的接口方法中的名称,直接在标签的内部来编写sql语句-->
    <!--
    useGeneratedKeys属性：表示开启某个字段的值递增（主键设置为递增）
    keyProperty属性：标签将表中的那个字段作为主键进行递增
    -->
    <!--自定义映射的规则：resultMap标签来完成映射规则的定义-->
    <!--
        id属性：标签给这个映射分配一个唯一的id值，对应的就是resultMap="id属性的值"属性的取值
        type属性：取值是一个类，具体表示的是数据库中的查询结果与java中的哪个实体类进行结果集的映射
    -->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!-- 插入用户数据：Integer insert(User user) -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO
            t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)
        VALUES
            (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>

    <!--select语句在执行的时候，查询的结果是一个对象，多个对象-->
    <!--
        resultType:表示查询的结果集类型，只需要指定对应映射类的类别，并且包含完整包接口
    -->
    <!-- 根据用户名查询用户数据：User findByUsername(String username) -->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT
            *
        FROM
            t_user
        WHERE
            username = #{username}
    </select>

    <update id="updatePasswordByUid">
        update t_user
        set password=#{password},
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        where uid=#{uid}
    </update>

    <select id="findByUid" resultMap="UserEntityMap">
        select * from t_user where uid=#{uid} ;
    </select>

    <update id="updateInfoByUid">
        update t_user
        set
        <if test="phone!=null">phone = #{phone},</if>
        <if test="email!=null">email = #{email},</if>
        <if test="gender!=null">gender = #{gender},</if>
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        where uid = #{uid}
    </update>

    <!-- 根据uid更新用户的头像
       Integer updateAvatarByUid(
          @Param("uid") Integer uid,
          @Param("avatar") String avatar,
          @Param("modifiedUser") String modifiedUser,
          @Param("modifiedTime") Date modifiedTime) -->
    <update id="updateAvatarByUid">
        UPDATE
            t_user
        SET
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>
</mapper>
